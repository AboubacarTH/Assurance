/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view.panel;

import bean.Classe;
import bean.Energie;
import bean.Groupe;
import bean.MotoMoteur;
import bean.Tarif;
import bean.Usage;
import bean.VehiculeMoteur;
import bean.Zone;
import java.awt.Component;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.JPopupMenu;
import javax.swing.table.DefaultTableModel;
import static main.Assurances.getController;
import static main.Assurances.getUser;
import view.dialog.ClasseDialog;
import view.dialog.GroupeDialog;
import view.dialog.MotoMoteurDialog;
import view.dialog.TarifDialog;
import view.dialog.UsageDialog;
import view.dialog.VehiculeMoteurDialog;
import view.dialog.ZoneDialog;

/**
 *
 * @author ATH
 */
public class ConfigurationPanel extends javax.swing.JPanel {

    /**
     * Creates new form Configuration
     */
    public ConfigurationPanel() {
        initComponents();
        initPopups();
        initTables();
        initCB();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        popup_classe = new javax.swing.JPopupMenu();
        popup_menu_classe_add = new javax.swing.JMenuItem();
        popup_menu_classe_update = new javax.swing.JMenuItem();
        popup_menu_classe_remove = new javax.swing.JMenuItem();
        popup_groupe = new javax.swing.JPopupMenu();
        popup_menu_groupe_add = new javax.swing.JMenuItem();
        popup_menu_groupe_update = new javax.swing.JMenuItem();
        popup_menu_groupe_remove = new javax.swing.JMenuItem();
        popup_zone = new javax.swing.JPopupMenu();
        popup_menu_zone_add = new javax.swing.JMenuItem();
        popup_menu_zone_update = new javax.swing.JMenuItem();
        popup_menu_zone_remove = new javax.swing.JMenuItem();
        popup_vehicule_moteur = new javax.swing.JPopupMenu();
        popup_menu_vehicule_moteur_add = new javax.swing.JMenuItem();
        popup_menu_vehicule_moteur_update = new javax.swing.JMenuItem();
        popup_menu_vehicule_moteur_remove = new javax.swing.JMenuItem();
        popup_usage = new javax.swing.JPopupMenu();
        popup_menu_usage_add = new javax.swing.JMenuItem();
        popup_menu_usage_update = new javax.swing.JMenuItem();
        popup_menu_usage_remove = new javax.swing.JMenuItem();
        popup_moto_moteur = new javax.swing.JPopupMenu();
        popup_menu_moto_moteur_add = new javax.swing.JMenuItem();
        popup_menu_moto_moteur_update = new javax.swing.JMenuItem();
        popup_menu_moto_moteur_remove = new javax.swing.JMenuItem();
        buttonGroup = new javax.swing.ButtonGroup();
        popup_tarif = new javax.swing.JPopupMenu();
        popup_menu_tarif_add = new javax.swing.JMenuItem();
        popup_menu_tarif_update = new javax.swing.JMenuItem();
        popup_menu_tarif_remove = new javax.swing.JMenuItem();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        panel_base = new javax.swing.JPanel();
        scrollPane_classe = new javax.swing.JScrollPane();
        table_classe = new javax.swing.JTable();
        scrollPane_groupe = new javax.swing.JScrollPane();
        table_groupe = new javax.swing.JTable();
        scrollPane_zone = new javax.swing.JScrollPane();
        table_zone = new javax.swing.JTable();
        scrollPane_vehicule_moteur = new javax.swing.JScrollPane();
        table_vehicule_moteur = new javax.swing.JTable();
        scrollPane_usage = new javax.swing.JScrollPane();
        table_usage = new javax.swing.JTable();
        scrollPane_moto_moteur = new javax.swing.JScrollPane();
        table_moto_moteur = new javax.swing.JTable();
        panel_tarif = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        combo_usage = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        combo_classe = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        combo_groupe = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        combo_zone = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        combo_puissance = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        combo_energie = new javax.swing.JComboBox<>();
        radio_btn_vehicule = new javax.swing.JRadioButton();
        radio_btn_moto = new javax.swing.JRadioButton();
        scrollPane_tarif = new javax.swing.JScrollPane();
        table_tarif = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        popup_menu_classe_add.setText("Ajouter classe");
        popup_menu_classe_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_classe_addActionPerformed(evt);
            }
        });
        popup_classe.add(popup_menu_classe_add);

        popup_menu_classe_update.setText("Mettre à jour classe");
        popup_menu_classe_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_classe_updateActionPerformed(evt);
            }
        });
        popup_classe.add(popup_menu_classe_update);

        popup_menu_classe_remove.setText("Suprimer classe");
        popup_menu_classe_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_classe_removeActionPerformed(evt);
            }
        });
        popup_classe.add(popup_menu_classe_remove);

        popup_menu_groupe_add.setText("Ajouter groupe");
        popup_menu_groupe_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_groupe_addActionPerformed(evt);
            }
        });
        popup_groupe.add(popup_menu_groupe_add);

        popup_menu_groupe_update.setText("Mettre à jour groupe");
        popup_menu_groupe_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_groupe_updateActionPerformed(evt);
            }
        });
        popup_groupe.add(popup_menu_groupe_update);

        popup_menu_groupe_remove.setText("Suprimer groupe");
        popup_menu_groupe_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_groupe_removeActionPerformed(evt);
            }
        });
        popup_groupe.add(popup_menu_groupe_remove);

        popup_menu_zone_add.setText("Ajouter zone");
        popup_menu_zone_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_zone_addActionPerformed(evt);
            }
        });
        popup_zone.add(popup_menu_zone_add);

        popup_menu_zone_update.setText("Mettre à jour zone");
        popup_menu_zone_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_zone_updateActionPerformed(evt);
            }
        });
        popup_zone.add(popup_menu_zone_update);

        popup_menu_zone_remove.setText("Suprimer zone");
        popup_menu_zone_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_zone_removeActionPerformed(evt);
            }
        });
        popup_zone.add(popup_menu_zone_remove);

        popup_menu_vehicule_moteur_add.setText("Ajouter puissance");
        popup_menu_vehicule_moteur_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_vehicule_moteur_addActionPerformed(evt);
            }
        });
        popup_vehicule_moteur.add(popup_menu_vehicule_moteur_add);

        popup_menu_vehicule_moteur_update.setText("Mettre à jour puissance");
        popup_menu_vehicule_moteur_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_vehicule_moteur_updateActionPerformed(evt);
            }
        });
        popup_vehicule_moteur.add(popup_menu_vehicule_moteur_update);

        popup_menu_vehicule_moteur_remove.setText("Suprimer puissance");
        popup_menu_vehicule_moteur_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_vehicule_moteur_removeActionPerformed(evt);
            }
        });
        popup_vehicule_moteur.add(popup_menu_vehicule_moteur_remove);

        popup_menu_usage_add.setText("Ajouter usage");
        popup_menu_usage_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_usage_addActionPerformed(evt);
            }
        });
        popup_usage.add(popup_menu_usage_add);

        popup_menu_usage_update.setText("Mettre à jour usage");
        popup_menu_usage_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_usage_updateActionPerformed(evt);
            }
        });
        popup_usage.add(popup_menu_usage_update);

        popup_menu_usage_remove.setText("Suprimer usage");
        popup_menu_usage_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_usage_removeActionPerformed(evt);
            }
        });
        popup_usage.add(popup_menu_usage_remove);

        popup_menu_moto_moteur_add.setText("Ajouter puissance");
        popup_menu_moto_moteur_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_moto_moteur_addActionPerformed(evt);
            }
        });
        popup_moto_moteur.add(popup_menu_moto_moteur_add);

        popup_menu_moto_moteur_update.setText("Mettre à jour puissance");
        popup_menu_moto_moteur_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_moto_moteur_updateActionPerformed(evt);
            }
        });
        popup_moto_moteur.add(popup_menu_moto_moteur_update);

        popup_menu_moto_moteur_remove.setText("Suprimer puissance");
        popup_menu_moto_moteur_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_moto_moteur_removeActionPerformed(evt);
            }
        });
        popup_moto_moteur.add(popup_menu_moto_moteur_remove);

        popup_menu_tarif_add.setText("Ajouter tarif");
        popup_menu_tarif_add.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_tarif_addActionPerformed(evt);
            }
        });
        popup_tarif.add(popup_menu_tarif_add);

        popup_menu_tarif_update.setText("Mettre à jour tarif");
        popup_menu_tarif_update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_tarif_updateActionPerformed(evt);
            }
        });
        popup_tarif.add(popup_menu_tarif_update);

        popup_menu_tarif_remove.setText("Suprimer tarif");
        popup_menu_tarif_remove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                popup_menu_tarif_removeActionPerformed(evt);
            }
        });
        popup_tarif.add(popup_menu_tarif_remove);

        scrollPane_classe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Liste classe"));

        table_classe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Classe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_classe.setViewportView(table_classe);
        if (table_classe.getColumnModel().getColumnCount() > 0) {
            table_classe.getColumnModel().getColumn(0).setMinWidth(35);
            table_classe.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_classe.getColumnModel().getColumn(0).setMaxWidth(35);
        }

        scrollPane_groupe.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Liste groupe"));

        table_groupe.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Groupe"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_groupe.setViewportView(table_groupe);
        if (table_groupe.getColumnModel().getColumnCount() > 0) {
            table_groupe.getColumnModel().getColumn(0).setMinWidth(35);
            table_groupe.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_groupe.getColumnModel().getColumn(0).setMaxWidth(35);
        }

        scrollPane_zone.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Liste zone"));

        table_zone.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Zone", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_zone.setViewportView(table_zone);
        if (table_zone.getColumnModel().getColumnCount() > 0) {
            table_zone.getColumnModel().getColumn(0).setMinWidth(35);
            table_zone.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_zone.getColumnModel().getColumn(0).setMaxWidth(35);
            table_zone.getColumnModel().getColumn(2).setMinWidth(5);
            table_zone.getColumnModel().getColumn(2).setPreferredWidth(5);
            table_zone.getColumnModel().getColumn(2).setMaxWidth(5);
        }

        scrollPane_vehicule_moteur.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Liste véhicule moteurs"));

        table_vehicule_moteur.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Puissance", "Energie", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_vehicule_moteur.setViewportView(table_vehicule_moteur);
        if (table_vehicule_moteur.getColumnModel().getColumnCount() > 0) {
            table_vehicule_moteur.getColumnModel().getColumn(0).setMinWidth(35);
            table_vehicule_moteur.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_vehicule_moteur.getColumnModel().getColumn(0).setMaxWidth(35);
            table_vehicule_moteur.getColumnModel().getColumn(3).setMinWidth(5);
            table_vehicule_moteur.getColumnModel().getColumn(3).setPreferredWidth(5);
            table_vehicule_moteur.getColumnModel().getColumn(3).setMaxWidth(5);
        }

        scrollPane_usage.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Liste véhicules usage"));

        table_usage.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Usage", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_usage.setViewportView(table_usage);
        if (table_usage.getColumnModel().getColumnCount() > 0) {
            table_usage.getColumnModel().getColumn(0).setMinWidth(35);
            table_usage.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_usage.getColumnModel().getColumn(0).setMaxWidth(35);
            table_usage.getColumnModel().getColumn(2).setMinWidth(5);
            table_usage.getColumnModel().getColumn(2).setPreferredWidth(5);
            table_usage.getColumnModel().getColumn(2).setMaxWidth(5);
        }

        scrollPane_moto_moteur.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Liste moto moteurs"));

        table_moto_moteur.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "N°", "Puissance", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_moto_moteur.setViewportView(table_moto_moteur);
        if (table_moto_moteur.getColumnModel().getColumnCount() > 0) {
            table_moto_moteur.getColumnModel().getColumn(0).setMinWidth(35);
            table_moto_moteur.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_moto_moteur.getColumnModel().getColumn(0).setMaxWidth(35);
            table_moto_moteur.getColumnModel().getColumn(2).setMinWidth(5);
            table_moto_moteur.getColumnModel().getColumn(2).setPreferredWidth(5);
            table_moto_moteur.getColumnModel().getColumn(2).setMaxWidth(5);
        }

        javax.swing.GroupLayout panel_baseLayout = new javax.swing.GroupLayout(panel_base);
        panel_base.setLayout(panel_baseLayout);
        panel_baseLayout.setHorizontalGroup(
            panel_baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_baseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(panel_baseLayout.createSequentialGroup()
                        .addComponent(scrollPane_classe, javax.swing.GroupLayout.PREFERRED_SIZE, 245, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(scrollPane_groupe, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(scrollPane_moto_moteur))
                .addGap(18, 18, 18)
                .addGroup(panel_baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane_usage, javax.swing.GroupLayout.DEFAULT_SIZE, 538, Short.MAX_VALUE)
                    .addGroup(panel_baseLayout.createSequentialGroup()
                        .addComponent(scrollPane_zone, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(scrollPane_vehicule_moteur, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_baseLayout.setVerticalGroup(
            panel_baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_baseLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panel_baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane_classe, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE)
                    .addComponent(scrollPane_groupe, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scrollPane_zone, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(scrollPane_vehicule_moteur, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(18, 18, 18)
                .addGroup(panel_baseLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(scrollPane_usage, javax.swing.GroupLayout.DEFAULT_SIZE, 177, Short.MAX_VALUE)
                    .addComponent(scrollPane_moto_moteur, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(269, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Base", panel_base);

        jLabel1.setText("Usage");

        combo_usage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_usageActionPerformed(evt);
            }
        });

        jLabel2.setText("Classe");

        combo_classe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_classeActionPerformed(evt);
            }
        });

        jLabel3.setText("Groupe");

        combo_groupe.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_groupeActionPerformed(evt);
            }
        });

        jLabel4.setText("Zone");

        combo_zone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_zoneActionPerformed(evt);
            }
        });

        jLabel5.setText("Puissance");

        combo_puissance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_puissanceActionPerformed(evt);
            }
        });

        jLabel6.setText("Energie");

        combo_energie.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_energieActionPerformed(evt);
            }
        });

        buttonGroup.add(radio_btn_vehicule);
        radio_btn_vehicule.setSelected(true);
        radio_btn_vehicule.setText("Véhicule");
        radio_btn_vehicule.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_btn_vehiculeActionPerformed(evt);
            }
        });

        buttonGroup.add(radio_btn_moto);
        radio_btn_moto.setText("Moto");
        radio_btn_moto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radio_btn_motoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(combo_usage, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(combo_classe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(combo_groupe, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(18, 18, 18)
                        .addComponent(combo_zone, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(combo_puissance, 0, 148, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(18, 18, 18)
                        .addComponent(combo_energie, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(radio_btn_vehicule)
                        .addGap(18, 18, 18)
                        .addComponent(radio_btn_moto)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(radio_btn_vehicule)
                    .addComponent(radio_btn_moto))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(combo_usage, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(combo_classe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(combo_groupe, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(combo_zone, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel6)
                    .addComponent(combo_energie, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5)
                    .addComponent(combo_puissance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        table_tarif.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "N°", "Usage", "Classe", "Groupe", "Zone", "Puissance", "Energie", "Tarif", "ID"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        scrollPane_tarif.setViewportView(table_tarif);
        if (table_tarif.getColumnModel().getColumnCount() > 0) {
            table_tarif.getColumnModel().getColumn(0).setMinWidth(35);
            table_tarif.getColumnModel().getColumn(0).setPreferredWidth(35);
            table_tarif.getColumnModel().getColumn(0).setMaxWidth(35);
            table_tarif.getColumnModel().getColumn(1).setPreferredWidth(200);
            table_tarif.getColumnModel().getColumn(2).setPreferredWidth(70);
            table_tarif.getColumnModel().getColumn(3).setPreferredWidth(70);
            table_tarif.getColumnModel().getColumn(4).setPreferredWidth(70);
            table_tarif.getColumnModel().getColumn(5).setPreferredWidth(150);
            table_tarif.getColumnModel().getColumn(6).setPreferredWidth(70);
            table_tarif.getColumnModel().getColumn(8).setMinWidth(5);
            table_tarif.getColumnModel().getColumn(8).setPreferredWidth(5);
            table_tarif.getColumnModel().getColumn(8).setMaxWidth(5);
        }

        jLabel7.setText("Rechercher");

        javax.swing.GroupLayout panel_tarifLayout = new javax.swing.GroupLayout(panel_tarif);
        panel_tarif.setLayout(panel_tarifLayout);
        panel_tarifLayout.setHorizontalGroup(
            panel_tarifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tarifLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(panel_tarifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(scrollPane_tarif, javax.swing.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE)
                    .addGroup(panel_tarifLayout.createSequentialGroup()
                        .addComponent(jLabel7)
                        .addGap(18, 18, 18)
                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        panel_tarifLayout.setVerticalGroup(
            panel_tarifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panel_tarifLayout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(panel_tarifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panel_tarifLayout.createSequentialGroup()
                        .addGroup(panel_tarifLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(scrollPane_tarif, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE))
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jTabbedPane1.addTab("Tarification", panel_tarif);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTabbedPane1)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    private void popup_menu_classe_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_classe_addActionPerformed
        ajouter_classe();
    }//GEN-LAST:event_popup_menu_classe_addActionPerformed

    private void popup_menu_classe_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_classe_updateActionPerformed
        mettre_a_jour_classe(table_classe.getSelectedRow());
    }//GEN-LAST:event_popup_menu_classe_updateActionPerformed

    private void popup_menu_classe_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_classe_removeActionPerformed
        suprimer_classe(table_classe.getSelectedRow());
    }//GEN-LAST:event_popup_menu_classe_removeActionPerformed

    private void popup_menu_groupe_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_groupe_addActionPerformed
        ajouter_groupe();
    }//GEN-LAST:event_popup_menu_groupe_addActionPerformed

    private void popup_menu_groupe_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_groupe_updateActionPerformed
        mettre_a_jour_groupe(table_groupe.getSelectedRow());
    }//GEN-LAST:event_popup_menu_groupe_updateActionPerformed

    private void popup_menu_groupe_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_groupe_removeActionPerformed
        suprimer_groupe(table_groupe.getSelectedRow());
    }//GEN-LAST:event_popup_menu_groupe_removeActionPerformed

    private void popup_menu_zone_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_zone_addActionPerformed
        ajouter_zone();
    }//GEN-LAST:event_popup_menu_zone_addActionPerformed

    private void popup_menu_zone_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_zone_updateActionPerformed
        mettre_a_jour_zone(table_zone.getSelectedRow());
    }//GEN-LAST:event_popup_menu_zone_updateActionPerformed

    private void popup_menu_zone_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_zone_removeActionPerformed
        suprimer_zone(table_zone.getSelectedRow());
    }//GEN-LAST:event_popup_menu_zone_removeActionPerformed

    private void popup_menu_vehicule_moteur_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_vehicule_moteur_addActionPerformed
        ajouter_vehicule_moteur();
    }//GEN-LAST:event_popup_menu_vehicule_moteur_addActionPerformed

    private void popup_menu_vehicule_moteur_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_vehicule_moteur_updateActionPerformed
        mettre_a_jour_vehicule_moteur(table_vehicule_moteur.getSelectedRow());
    }//GEN-LAST:event_popup_menu_vehicule_moteur_updateActionPerformed

    private void popup_menu_vehicule_moteur_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_vehicule_moteur_removeActionPerformed
        suprimer_vehicule_moteur(table_vehicule_moteur.getSelectedRow());
    }//GEN-LAST:event_popup_menu_vehicule_moteur_removeActionPerformed

    private void popup_menu_usage_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_usage_addActionPerformed
        ajouter_usage();
    }//GEN-LAST:event_popup_menu_usage_addActionPerformed

    private void popup_menu_usage_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_usage_updateActionPerformed
        mettre_a_jour_usage(table_usage.getSelectedRow());
    }//GEN-LAST:event_popup_menu_usage_updateActionPerformed

    private void popup_menu_usage_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_usage_removeActionPerformed
        suprimer_usage(table_usage.getSelectedRow());
    }//GEN-LAST:event_popup_menu_usage_removeActionPerformed

    private void popup_menu_moto_moteur_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_moto_moteur_addActionPerformed
        ajouter_Moto_Moteur();
    }//GEN-LAST:event_popup_menu_moto_moteur_addActionPerformed

    private void popup_menu_moto_moteur_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_moto_moteur_updateActionPerformed
        mettre_a_jour_moto_moteur(table_moto_moteur.getSelectedRow());
    }//GEN-LAST:event_popup_menu_moto_moteur_updateActionPerformed

    private void popup_menu_moto_moteur_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_moto_moteur_removeActionPerformed
        suprimer_moto_moteur(table_moto_moteur.getSelectedRow());
    }//GEN-LAST:event_popup_menu_moto_moteur_removeActionPerformed

    private void radio_btn_vehiculeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_btn_vehiculeActionPerformed
        initCBPuissance();
        combo_energie.setEnabled(true);
        updateTableTarif();
    }//GEN-LAST:event_radio_btn_vehiculeActionPerformed

    private void radio_btn_motoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radio_btn_motoActionPerformed
        initCBPuissance();
        combo_energie.setEnabled(false);
        updateTableTarif();
    }//GEN-LAST:event_radio_btn_motoActionPerformed

    private void combo_energieActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_energieActionPerformed
        initCBPuissance();
        updateTableTarif();
    }//GEN-LAST:event_combo_energieActionPerformed

    private void popup_menu_tarif_addActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_tarif_addActionPerformed
        ajouter_tarif();
    }//GEN-LAST:event_popup_menu_tarif_addActionPerformed

    private void popup_menu_tarif_updateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_tarif_updateActionPerformed
        mettre_a_jour_tarif(table_tarif.getSelectedRow());
    }//GEN-LAST:event_popup_menu_tarif_updateActionPerformed

    private void popup_menu_tarif_removeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_popup_menu_tarif_removeActionPerformed
        suprimer_tarif(table_tarif.getSelectedRow());
    }//GEN-LAST:event_popup_menu_tarif_removeActionPerformed

    private void combo_usageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_usageActionPerformed
        updateTableTarif();
    }//GEN-LAST:event_combo_usageActionPerformed

    private void combo_classeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_classeActionPerformed
        updateTableTarif();
    }//GEN-LAST:event_combo_classeActionPerformed

    private void combo_groupeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_groupeActionPerformed
        updateTableTarif();
    }//GEN-LAST:event_combo_groupeActionPerformed

    private void combo_zoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_zoneActionPerformed
        updateTableTarif();
    }//GEN-LAST:event_combo_zoneActionPerformed

    private void combo_puissanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_puissanceActionPerformed
        updateTableTarif();
    }//GEN-LAST:event_combo_puissanceActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup;
    private javax.swing.JComboBox<String> combo_classe;
    private javax.swing.JComboBox<String> combo_energie;
    private javax.swing.JComboBox<String> combo_groupe;
    private javax.swing.JComboBox<String> combo_puissance;
    private javax.swing.JComboBox<String> combo_usage;
    private javax.swing.JComboBox<String> combo_zone;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JPanel panel_base;
    private javax.swing.JPanel panel_tarif;
    private javax.swing.JPopupMenu popup_classe;
    private javax.swing.JPopupMenu popup_groupe;
    private javax.swing.JMenuItem popup_menu_classe_add;
    private javax.swing.JMenuItem popup_menu_classe_remove;
    private javax.swing.JMenuItem popup_menu_classe_update;
    private javax.swing.JMenuItem popup_menu_groupe_add;
    private javax.swing.JMenuItem popup_menu_groupe_remove;
    private javax.swing.JMenuItem popup_menu_groupe_update;
    private javax.swing.JMenuItem popup_menu_moto_moteur_add;
    private javax.swing.JMenuItem popup_menu_moto_moteur_remove;
    private javax.swing.JMenuItem popup_menu_moto_moteur_update;
    private javax.swing.JMenuItem popup_menu_tarif_add;
    private javax.swing.JMenuItem popup_menu_tarif_remove;
    private javax.swing.JMenuItem popup_menu_tarif_update;
    private javax.swing.JMenuItem popup_menu_usage_add;
    private javax.swing.JMenuItem popup_menu_usage_remove;
    private javax.swing.JMenuItem popup_menu_usage_update;
    private javax.swing.JMenuItem popup_menu_vehicule_moteur_add;
    private javax.swing.JMenuItem popup_menu_vehicule_moteur_remove;
    private javax.swing.JMenuItem popup_menu_vehicule_moteur_update;
    private javax.swing.JMenuItem popup_menu_zone_add;
    private javax.swing.JMenuItem popup_menu_zone_remove;
    private javax.swing.JMenuItem popup_menu_zone_update;
    private javax.swing.JPopupMenu popup_moto_moteur;
    private javax.swing.JPopupMenu popup_tarif;
    private javax.swing.JPopupMenu popup_usage;
    private javax.swing.JPopupMenu popup_vehicule_moteur;
    private javax.swing.JPopupMenu popup_zone;
    private javax.swing.JRadioButton radio_btn_moto;
    private javax.swing.JRadioButton radio_btn_vehicule;
    private javax.swing.JScrollPane scrollPane_classe;
    private javax.swing.JScrollPane scrollPane_groupe;
    private javax.swing.JScrollPane scrollPane_moto_moteur;
    private javax.swing.JScrollPane scrollPane_tarif;
    private javax.swing.JScrollPane scrollPane_usage;
    private javax.swing.JScrollPane scrollPane_vehicule_moteur;
    private javax.swing.JScrollPane scrollPane_zone;
    private javax.swing.JTable table_classe;
    private javax.swing.JTable table_groupe;
    private javax.swing.JTable table_moto_moteur;
    private javax.swing.JTable table_tarif;
    private javax.swing.JTable table_usage;
    private javax.swing.JTable table_vehicule_moteur;
    private javax.swing.JTable table_zone;
    // End of variables declaration//GEN-END:variables

    private static void addPopup(Component component, final JPopupMenu popup) {
        component.addMouseListener(new MouseAdapter() {
            @Override
            public void mousePressed(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            @Override
            public void mouseReleased(MouseEvent e) {
                if (e.isPopupTrigger()) {
                    showMenu(e);
                }
            }

            private void showMenu(MouseEvent e) {
                popup.show(e.getComponent(), e.getX(), e.getY());
            }
        });
    }

    private void updateTableClasse() {
        DefaultTableModel model = (DefaultTableModel) table_classe.getModel();
        model.setRowCount(0);
        ArrayList<Classe> list = getController().getClasseController().getClasses();
        for (int i = 0; i < list.size(); i++) {
            Object colonne[] = new Object[2];
            colonne[0] = i + 1;
            colonne[1] = list.get(i).getId();
            model.addRow(colonne);
        }
        table_classe.setModel(model);
    }

    private void updateTableGroupe() {
        DefaultTableModel model = (DefaultTableModel) table_groupe.getModel();
        model.setRowCount(0);
        ArrayList<Groupe> list = getController().getGroupeController().getGroupes();
        for (int i = 0; i < list.size(); i++) {
            Object colonne[] = new Object[2];
            colonne[0] = i + 1;
            colonne[1] = list.get(i).getId();
            model.addRow(colonne);
        }
        table_groupe.setModel(model);
    }

    private void updateTableZone() {
        DefaultTableModel model = (DefaultTableModel) table_zone.getModel();
        model.setRowCount(0);
        ArrayList<Zone> list = getController().getZoneController().getZones();
        for (int i = 0; i < list.size(); i++) {
            Object colonne[] = new Object[3];
            colonne[0] = i + 1;
            colonne[1] = list.get(i).getZone();
            colonne[2] = list.get(i).getId();
            model.addRow(colonne);
        }
        table_zone.setModel(model);
    }

    private void updateTableVehiculeMoteur() {
        DefaultTableModel model = (DefaultTableModel) table_vehicule_moteur.getModel();
        model.setRowCount(0);
        ArrayList<VehiculeMoteur> list = getController().getVehiculeMoteurController().getVehiculeMoteurs(0);
        for (int i = 0; i < list.size(); i++) {
            Object colonne[] = new Object[4];
            colonne[0] = i + 1;
            colonne[1] = list.get(i).getPuissance();
            colonne[2] = getController().getEnergieController().getEnergie(list.get(i).getId_energie()).getEnergie();
            colonne[3] = list.get(i).getId();
            model.addRow(colonne);
        }
        table_vehicule_moteur.setModel(model);
    }

    private void updateTableUsage() {
        DefaultTableModel model = (DefaultTableModel) table_usage.getModel();
        model.setRowCount(0);
        ArrayList<Usage> list = getController().getUsageController().getUsages();
        for (int i = 0; i < list.size(); i++) {
            Object colonne[] = new Object[3];
            colonne[0] = i + 1;
            colonne[1] = list.get(i).getUsage();
            colonne[2] = list.get(i).getId();
            model.addRow(colonne);
        }
        table_usage.setModel(model);
    }

    private void updateTableMotoMoteur() {
        DefaultTableModel model = (DefaultTableModel) table_moto_moteur.getModel();
        model.setRowCount(0);
        ArrayList<MotoMoteur> list = getController().getMotoMoteurController().getMotoMoteurs();
        for (int i = 0; i < list.size(); i++) {
            Object colonne[] = new Object[3];
            colonne[0] = i + 1;
            colonne[1] = list.get(i).getPuissance();
            colonne[2] = list.get(i).getId();
            model.addRow(colonne);
        }
        table_moto_moteur.setModel(model);
    }

    private void updateTableTarif() {
        DefaultTableModel model = (DefaultTableModel) table_tarif.getModel();
        model.setRowCount(0);
        if (combo_classe.getSelectedIndex() < 0 || combo_usage.getSelectedIndex() < 0 || combo_groupe.getSelectedIndex() < 0 || combo_zone.getSelectedIndex() < 0 || combo_energie.getSelectedIndex() < 0 || combo_puissance.getSelectedIndex() < 0) {
            return;
        }
        long id_usage = 0, id_classe = 0, id_groupe = 0, id_zone = 0, id_energie = 0, id_puissance = 0;
        Usage usage = getController().getUsageController().getUsage(combo_usage.getSelectedItem().toString());
        if (usage != null) {
            id_usage = usage.getId();
        }
        Classe classe;
        try {
            classe = getController().getClasseController().getClasse(Long.parseLong(combo_classe.getSelectedItem().toString()));
        } catch (NumberFormatException e) {
            classe = null;
        }
        if (classe != null) {
            id_classe = classe.getId();
        }
        Groupe groupe;
        try {
            groupe = getController().getGroupeController().getGroupe(Long.parseLong(combo_groupe.getSelectedItem().toString()));
        } catch (NumberFormatException e) {
            groupe = null;
        }
        if (groupe != null) {
            id_groupe = groupe.getId();
        }
        Zone zone = getController().getZoneController().getZone(combo_zone.getSelectedItem().toString());
        if (zone != null) {
            id_zone = zone.getId();
        }
        Energie energie = getController().getEnergieController().getEnergie(combo_energie.getSelectedItem().toString());
        if (energie != null) {
            id_energie = energie.getId();
        }
        int type = 0;
        if (radio_btn_vehicule.isSelected()) {
            type = 1;
            VehiculeMoteur vehiculeMoteur = getController().getVehiculeMoteurController().getVehiculeMoteur(combo_puissance.getSelectedItem().toString());
            if (vehiculeMoteur != null) {
                id_puissance = vehiculeMoteur.getId();
            }
        }
        if (radio_btn_moto.isSelected()) {
            type = 2;
            MotoMoteur motoMoteur = getController().getMotoMoteurController().getMotoMoteur(combo_puissance.getSelectedItem().toString());
            if (motoMoteur != null) {
                id_puissance = motoMoteur.getId();
            }
        }
        ArrayList<Tarif> list = getController().getTarifController().getTarifs(id_classe, id_groupe, id_zone, id_usage, id_puissance, id_energie, type);
        for (int i = 0; i < list.size(); i++) {
            Object colonne[] = new Object[9];
            colonne[0] = i + 1;
            colonne[1] = getController().getUsageController().getUsage(list.get(i).getId_usage()).getUsage();
            colonne[2] = getController().getClasseController().getClasse(list.get(i).getId_classe()).getId();
            colonne[3] = getController().getGroupeController().getGroupe(list.get(i).getId_groupe()).getId();
            colonne[4] = getController().getZoneController().getZone(list.get(i).getId_zone()).getZone();
            if (getController().getTarifController().getVehiculeController().getVehicule(list.get(i).getId()) != null) {
                colonne[5] = getController().getVehiculeMoteurController().getVehiculeMoteur(getController().getTarifController().getVehiculeController().getVehicule(list.get(i).getId()).getId_puissance()).getPuissance();
                colonne[6] = getController().getEnergieController().getEnergie(getController().getVehiculeMoteurController().getVehiculeMoteur(getController().getTarifController().getVehiculeController().getVehicule(list.get(i).getId()).getId_puissance()).getId_energie()).getEnergie();
            } else {
                colonne[5] = getController().getMotoMoteurController().getMotoMoteur(getController().getTarifController().getMotoController().getMoto(list.get(i).getId()).getId_puissance()).getPuissance();
                colonne[6] = "";
            }
            colonne[7] = list.get(i).getTarif();
            colonne[8] = list.get(i).getId();
            model.addRow(colonne);
        }
        table_tarif.setModel(model);
    }

    private void ajouter_classe() {
        if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
            droit_administration();
            return;
        }
        ClasseDialog classeDialog = new ClasseDialog(null, true);
        classeDialog.setVisible(true);
        updateTableClasse();
    }

    private void ajouter_tarif() {
        if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
            droit_administration();
            return;
        }
        TarifDialog tarifDialog = new TarifDialog(null, true);
        tarifDialog.setVisible(true);
        updateTableTarif();
    }

    private void ajouter_groupe() {
        if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
            droit_administration();
            return;
        }
        GroupeDialog groupeDialog = new GroupeDialog(null, true);
        groupeDialog.setVisible(true);
        updateTableGroupe();
    }

    private void ajouter_zone() {
        if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
            droit_administration();
            return;
        }
        ZoneDialog zoneDialog = new ZoneDialog(null, true);
        zoneDialog.setVisible(true);
        updateTableZone();
    }

    private void ajouter_vehicule_moteur() {
        if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
            droit_administration();
            return;
        }
        VehiculeMoteurDialog vehiculeMoteurDialog = new VehiculeMoteurDialog(null, true);
        vehiculeMoteurDialog.setVisible(true);
        updateTableVehiculeMoteur();
    }

    private void ajouter_usage() {
        if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
            droit_administration();
            return;
        }
        UsageDialog usageDialog = new UsageDialog(null, true);
        usageDialog.setVisible(true);
        updateTableUsage();
    }

    private void ajouter_Moto_Moteur() {
        if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
            droit_administration();
            return;
        }
        MotoMoteurDialog motoMoteurDialog = new MotoMoteurDialog(null, true);
        motoMoteurDialog.setVisible(true);
        updateTableMotoMoteur();
    }

    private void mettre_a_jour_classe(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Classe classe = getController().getClasseController().getClasse(Long.parseLong(table_classe.getValueAt(row, table_classe.getColumnCount() - 1).toString()));
            ClasseDialog classeDialog = new ClasseDialog(null, true, classe);
            classeDialog.setVisible(true);
            updateTableClasse();
        }
    }

    private void mettre_a_jour_tarif(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Tarif tarif = getController().getTarifController().getTarif(Long.parseLong(table_tarif.getValueAt(row, table_tarif.getColumnCount() - 1).toString()));
            TarifDialog tarifDialog = new TarifDialog(null, true, tarif);
            tarifDialog.setVisible(true);
            updateTableTarif();
        }
    }

    private void mettre_a_jour_groupe(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Groupe groupe = getController().getGroupeController().getGroupe(Long.parseLong(table_groupe.getValueAt(row, table_groupe.getColumnCount() - 1).toString()));
            GroupeDialog groupeDialog = new GroupeDialog(null, true, groupe);
            groupeDialog.setVisible(true);
            updateTableGroupe();
        }
    }

    private void mettre_a_jour_zone(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Zone zone = getController().getZoneController().getZone(Long.parseLong(table_zone.getValueAt(row, table_zone.getColumnCount() - 1).toString()));
            ZoneDialog zoneDialog = new ZoneDialog(null, true, zone);
            zoneDialog.setVisible(true);
            updateTableZone();
        }
    }

    private void mettre_a_jour_vehicule_moteur(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            VehiculeMoteur vehiculeMoteur = getController().getVehiculeMoteurController().getVehiculeMoteur(Long.parseLong(table_vehicule_moteur.getValueAt(row, table_vehicule_moteur.getColumnCount() - 1).toString()));
            VehiculeMoteurDialog vehiculeMoteurDialog = new VehiculeMoteurDialog(null, true, vehiculeMoteur);
            vehiculeMoteurDialog.setVisible(true);
            updateTableVehiculeMoteur();
        }
    }

    private void mettre_a_jour_usage(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Usage usage = getController().getUsageController().getUsage(Long.parseLong(table_usage.getValueAt(row, table_usage.getColumnCount() - 1).toString()));
            UsageDialog usageDialog = new UsageDialog(null, true, usage);
            usageDialog.setVisible(true);
            updateTableUsage();
        }
    }

    private void mettre_a_jour_moto_moteur(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            MotoMoteur motoMoteur = getController().getMotoMoteurController().getMotoMoteur(Long.parseLong(table_moto_moteur.getValueAt(row, table_moto_moteur.getColumnCount() - 1).toString()));
            MotoMoteurDialog motoMoteurDialog = new MotoMoteurDialog(null, true, motoMoteur);
            motoMoteurDialog.setVisible(true);
            updateTableMotoMoteur();
        }
    }

    private void suprimer_classe(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Classe classe = getController().getClasseController().getClasse(Long.parseLong(table_classe.getValueAt(row, table_classe.getColumnCount() - 1).toString()));
            int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer la classe " + classe.getId() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                getController().getClasseController().removeClasse(classe.getId());
                updateTableClasse();
            }
        }
    }

    private void suprimer_tarif(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Tarif tarif = getController().getTarifController().getTarif(Long.parseLong(table_tarif.getValueAt(row, table_tarif.getColumnCount() - 1).toString()));
            int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer le tarif " + tarif.getTarif() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                getController().getTarifController().removeTarif(tarif.getId());
                updateTableClasse();
            }
        }
    }

    private void suprimer_groupe(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Groupe groupe = getController().getGroupeController().getGroupe(Long.parseLong(table_groupe.getValueAt(row, table_groupe.getColumnCount() - 1).toString()));
            int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer le groupe " + groupe.getId() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                getController().getGroupeController().removeGroupe(groupe.getId());
                updateTableGroupe();
            }
        }
    }

    private void suprimer_zone(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Zone zone = getController().getZoneController().getZone(Long.parseLong(table_zone.getValueAt(row, table_zone.getColumnCount() - 1).toString()));
            int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer la zone " + zone.getZone() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                getController().getZoneController().removeZone(zone.getId());
                updateTableZone();
            }
        }
    }

    private void suprimer_vehicule_moteur(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            VehiculeMoteur vehiculeMoteur = getController().getVehiculeMoteurController().getVehiculeMoteur(Long.parseLong(table_vehicule_moteur.getValueAt(row, table_vehicule_moteur.getColumnCount() - 1).toString()));
            int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer la puissance " + vehiculeMoteur.getPuissance() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                getController().getVehiculeMoteurController().removeVehiculeMoteur(vehiculeMoteur.getId());
                updateTableVehiculeMoteur();
            }
        }
    }

    private void suprimer_usage(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            Usage usage = getController().getUsageController().getUsage(Long.parseLong(table_usage.getValueAt(row, table_usage.getColumnCount() - 1).toString()));
            int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer l'usage " + usage.getUsage() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                getController().getUsageController().removeUsage(usage.getId());
                updateTableUsage();
            }
        }
    }

    private void suprimer_moto_moteur(int row) {
        if (row > -1) {
            if (!getController().getDroitController().getDroit(getUser().getId()).isAdministration()) {
                droit_administration();
                return;
            }
            MotoMoteur motoMoteur = getController().getMotoMoteurController().getMotoMoteur(Long.parseLong(table_moto_moteur.getValueAt(row, table_moto_moteur.getColumnCount() - 1).toString()));
            int choice = JOptionPane.showConfirmDialog(this, "Etes vous sure de vouloir suprimer la puissance " + motoMoteur.getPuissance() + " ?", "Action irréversible", JOptionPane.YES_NO_OPTION);
            if (choice == 0) {
                getController().getMotoMoteurController().removeMotoMoteur(motoMoteur.getId());
                updateTableMotoMoteur();
            }
        }
    }

    private void initPopups() {
        //classe pop
        addPopup(scrollPane_classe, popup_classe);
        addPopup(table_classe, popup_classe);
        //groupe pop
        addPopup(scrollPane_groupe, popup_groupe);
        addPopup(table_groupe, popup_groupe);
        //zone pop
        addPopup(scrollPane_zone, popup_zone);
        addPopup(table_zone, popup_zone);
        //vehicul moteur
        addPopup(scrollPane_vehicule_moteur, popup_vehicule_moteur);
        addPopup(table_vehicule_moteur, popup_vehicule_moteur);
        //usage pop
        addPopup(scrollPane_usage, popup_usage);
        addPopup(table_usage, popup_usage);
        //moto moteur pop
        addPopup(scrollPane_moto_moteur, popup_moto_moteur);
        addPopup(table_moto_moteur, popup_moto_moteur);
        //tarif pop
        addPopup(scrollPane_tarif, popup_tarif);
        addPopup(table_tarif, popup_tarif);
    }

    private void initTables() {
        updateTableClasse();
        updateTableGroupe();
        updateTableZone();
        updateTableVehiculeMoteur();
        updateTableUsage();
        updateTableMotoMoteur();
        updateTableTarif();
    }

    private void initCBUsage() {
        combo_usage.removeAllItems();
        combo_usage.addItem("Tous");
        getController().getUsageController().getUsages().forEach((u) -> {
            combo_usage.addItem(u.getUsage());
        });
    }

    private void initCBClasse() {
        combo_classe.removeAllItems();
        combo_classe.addItem("Toutes");
        getController().getClasseController().getClasses().forEach((c) -> {
            combo_classe.addItem("" + c.getId());
        });
    }

    private void initCBGroupe() {
        combo_groupe.removeAllItems();
        combo_groupe.addItem("Tous");
        getController().getGroupeController().getGroupes().forEach((g) -> {
            combo_groupe.addItem("" + g.getId());
        });
    }

    private void initCBZone() {
        combo_zone.removeAllItems();
        combo_zone.addItem("Toutes");
        getController().getZoneController().getZones().forEach((z) -> {
            combo_zone.addItem(z.getZone());
        });
    }

    private void initCBEnergie() {
        combo_energie.removeAllItems();
        combo_energie.addItem("Toutes");
        getController().getEnergieController().getEnergies().forEach((e) -> {
            combo_energie.addItem(e.getEnergie());
        });
    }

    private void initCBPuissance() {
        combo_puissance.removeAllItems();
        combo_puissance.addItem("Toutes");
        if (radio_btn_vehicule.isSelected()) {
            long id_energie = 0;
            if (combo_energie.getSelectedIndex() > -1) {
                if (getController().getEnergieController().getEnergie(combo_energie.getSelectedItem().toString()) != null) {
                    id_energie = getController().getEnergieController().getEnergie(combo_energie.getSelectedItem().toString()).getId();
                }
            }

            getController().getVehiculeMoteurController().getVehiculeMoteurs(id_energie).forEach((p) -> {
                combo_puissance.addItem(p.getPuissance());
            });
        }
        if (radio_btn_moto.isSelected()) {
            getController().getMotoMoteurController().getMotoMoteurs().forEach((p) -> {
                combo_puissance.addItem(p.getPuissance());
            });
        }
    }

    private void initCB() {
        initCBUsage();
        initCBClasse();
        initCBGroupe();
        initCBZone();
        initCBEnergie();
        initCBPuissance();
    }

    private void droit_ajout() {
        JOptionPane.showMessageDialog(this, "Droit d'ajout est réquiert pour effectuer cette opération. ", "Droit d'ajout !", JOptionPane.INFORMATION_MESSAGE);
    }

    private void droit_modification() {
        JOptionPane.showMessageDialog(this, "Droit de modification est réquiert pour effectuer cette opération. ", "Droit de modification !", JOptionPane.INFORMATION_MESSAGE);
    }

    private void droit_supression() {
        JOptionPane.showMessageDialog(this, "Droit de supression est réquiert pour effectuer cette opération. ", "Droit de supression !", JOptionPane.INFORMATION_MESSAGE);
    }

    private void droit_administration() {
        JOptionPane.showMessageDialog(this, "Droit d'administration est réquiert pour effectuer cette opération. ", "Droit d'administration !", JOptionPane.INFORMATION_MESSAGE);
    }
}
